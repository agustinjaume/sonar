pipeline {
    agent any
    options {disableConcurrentBuilds()}
    environment {
        SCANNER_HOME = tool 'sonarqubescanner'
    }
    stages{
        
        stage('clean workspaces -----------') { 
            steps {
              cleanWs()
              sh 'env'
            } //steps
        }  //stage

        
        stage("git clone -----------------"){
            steps {
                cleanWs()
                    withCredentials([string(credentialsId: 'backend-3', variable: 'TOKEN')]) {  sh """  echo $TOKEN  """  }
                    checkout([$class: 'GitSCM', 
                    branches: [[name: '*/master']], 
                    doGenerateSubmoduleConfigurations: false, 
                    extensions: [[$class: 'CleanCheckout']], 
                    submoduleCfg: [], 
                    userRemoteConfigs: [
                        [url: 'git@github.com:agustinjaume/sonar.git', credentialsId: '']
                        ]])
                sh 'pwd' 
                sh 'ls -l'
            } //steps
        }  //stage
    
        stage('Code Quality Check via SonarQube') {
            steps {
                script {
                    withSonarQubeEnv("serversonardocker") {
                        sh '''
                        cd projects/backend-3
                        pwd
                        $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectKey=backend-3 \
                        -Dsonar.sources=. \
                        -Dsonar.host.url=http://172.17.0.3:9000 \
                        -Dsonar.login=$TOKEN
                        '''
                    } // withSonarQubeEnv
                }
            } //steps
        }  //stage       
   }  // stages
} //pipeline
